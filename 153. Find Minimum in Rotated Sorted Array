class Solution {
    private int minSearch(int []nums,int l,int h){
        int minNum=Integer.MAX_VALUE;
        while(l<=h){

            int mid=(h-l)/2+l;
            // Check if the part is totally sorted 
            // equals as it(l,h,m) can be pointing to the same number
            if(nums[l]<=nums[h]){
                minNum=Math.min(minNum,nums[l]);
                break;
            }
            // left sorted part check
            if(nums[l]<=nums[mid]){
                minNum=Math.min(minNum,nums[l]);
                l=mid+1;
            }
            // right sorted part check
            if(nums[mid]<=nums[h]){
                minNum=Math.min(minNum,nums[mid]);
                h=mid-1;    
            }
        }
        return minNum;
    }
    public int findMin(int[] nums) {
        int n = nums.length;
        int ans = minSearch(nums,0,n-1);
        return ans;
    }
}
